import pygame
import numpy as np
from keras.models import load_model

# Charger le modèle entraîné
model = load_model('mnist_model.h5')

# Dimensions
WINDOW_WIDTH, WINDOW_HEIGHT = 600, 400
DRAWING_WIDTH, DRAWING_HEIGHT = 400, 400
GRID_SIZE = 28
CELL_SIZE = DRAWING_WIDTH // GRID_SIZE

# Couleurs
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
LIGHT_GRAY = (230, 230, 230)
RED = (255, 0, 0)

# Création de la fenêtre
pygame.init()
window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("Reconnaissance de chiffres")

# Surface de dessin
drawing_surface = pygame.Surface((DRAWING_WIDTH, DRAWING_HEIGHT))
drawing_surface.fill(WHITE)

# Bouton
button_rect = pygame.Rect(420, 50, 160, 80)

# Grille
grid = np.zeros((GRID_SIZE, GRID_SIZE), dtype=np.uint8)

# Fonction pour dessiner sur la grille
def draw_on_grid(pos):
    x, y = pos[0] // CELL_SIZE, pos[1] // CELL_SIZE
    if 0 <= x < GRID_SIZE and 0 <= y < GRID_SIZE:
        grid[y][x] = 255  # Dessiner en noir
        pygame.draw.rect(drawing_surface, BLACK, (x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE))

# Fonction de reconnaissance de chiffre
def guessNumber(image):
    image = image.reshape(1, GRID_SIZE, GRID_SIZE)
    image = image.reshape(1, GRID_SIZE * GRID_SIZE)  # Aplatir
    image = image / 255.0  # Normalisation
    prediction = model.predict(image)
    return np.argmax(prediction)

# Boucle principale
def main():
    running = True
    drawing = False
    recognized = False

    window.fill(LIGHT_GRAY)
    window.blit(drawing_surface, (0, 0))
    pygame.draw.rect(window, GRAY, button_rect)
    font = pygame.font.Font(None, 24)
    text = font.render("Reconnaître", True, BLACK)
    window.blit(text, (button_rect.x + 20, button_rect.y + 30))
    pygame.display.flip()

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    if button_rect.collidepoint(event.pos):
                        image = grid.copy()
                        result = guessNumber(image)
                        font = pygame.font.Font(None, 48)
                        text = font.render(f"{result}", True, RED)
                        window.fill(LIGHT_GRAY)
                        window.blit(drawing_surface, (0, 0))
                        window.blit(text, (420, 150))
                        pygame.draw.rect(window, GRAY, button_rect)
                        pygame.display.flip()
                        recognized = True
                    else:
                        if recognized:
                            drawing_surface.fill(WHITE)
                            grid.fill(0)
                            recognized = False
                        drawing = True

            elif event.type == pygame.MOUSEBUTTONUP:
                if event.button == 1:
                    drawing = False

            elif event.type == pygame.MOUSEMOTION:
                if drawing:
                    draw_on_grid(event.pos)
                    window.fill(LIGHT_GRAY)
                    window.blit(drawing_surface, (0, 0))
                    pygame.draw.rect(window, GRAY, button_rect)
                    pygame.display.flip()

        pygame.draw.rect(window, GRAY, button_rect)
        font = pygame.font.Font(None, 24)
        text = font.render("Reconnaître", True, BLACK)
        window.blit(text, (button_rect.x + 20, button_rect.y + 30))

        pygame.display.flip()

    pygame.quit()

if __name__ == "__main__":
    main()
